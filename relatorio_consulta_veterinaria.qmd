---
title: "Sistema Interativo de Consultas Veterinárias"
author: "Diana Santos"
date: "Agosto 2025"
format:
  html:
    toc: true
    theme: minty
    code-fold: true
    code-tools: true
    toc-depth: 2
jupyter: python3
---

## 1. Introdução

Contextualização: Este projeto consiste na criação de um sistema interativo em Python para simular consultas veterinárias. 
O principal objetivo é aplicar conhecimentos de programação, modularização, boas práticas e testes num contexto prático e funcional.

Objetivo do Relatório: O sistema permite ao utilizador introduzir informações sobre um animal, responder a perguntas sobre sintomas, e 
obter recomendações básicas de cuidados ou encaminhamentos veterinários.

---

## 2. Objetivos do Projeto

Objetivos:
- Desenvolver uma aplicação interativa com menu em Python
- Utilizar estrutura modular com ficheiros separados (.py)
- Aplicar testes unitários e validações de entrada
- Consolidar boas práticas de documentação
- Criar uma interface textual simples e eficaz

---

## 3. Exemplo de Código Python

```{python}
# Exemplo do menu principal
import sys
sys.path.append("src")  # adiciona a pasta src à pesquisa de módulos

from interface import menu_principal
menu_principal()
```

---

## 4. Gráfico de Sintomas Frequentes (Plotly)

```{python}
import plotly.express as px
import pandas as pd

dados = pd.DataFrame({
    "Sintoma": ["Febre", "Tosse", "Letargia", "Vómito", "Diarreia"],
    "Ocorrências": [12, 8, 5, 7, 6]
})

fig = px.bar(dados, x="Sintoma", y="Ocorrências", title="Sintomas Frequentes em Animais de Estimação")
fig.show()
```

---

## 4. Ferramentas e Tecnologias Utilizadas

- **Linguagem:** Python 3.11
- **Editor:** Visual Studio Code
- **Controlo de versões:** Git + GitHub
- **Execução interativa:** Jupyter Notebook
- **Extensões:** Python, Jupyter, Pylance

---

## 5. Cronograma e Planeamento

O projeto foi desenvolvido ao longo de 8 fases, desde o planeamento até à entrega final:

| Fase | Descrição                                 | Duração |
|------|-------------------------------------------|---------|
| 1    | Planeamento e estruturação                | 1 dia   |
| 2    | Preparação do ambiente e GitHub           | 1 dia   |
| 3    | Codificação MVP                           | 3 dias  |
| 4    | Modularização e funcionalidades extra     | 2 dias  |
| 5    | Testes unitários                          | 1 dia   |
| 6    | Testes funcionais                         | 1 dia   |
| 7    | Documentação e finalização                | 1 dia   |

---

## 6. Testes e Validação

Foram realizados dois tipos de testes:

- **Testes unitários:** verificação de funções isoladas (`consulta.py`, `animais.py`)
- **Testes funcionais:** simulação de fluxo completo com input do utilizador

Abaixo, um exemplo de teste de função:
    from recomendacoes import gerar_recomendacao

# Teste simples
sintomas = ['febre', 'letargia']
print(gerar_recomendacao(sintomas))

---

## 7. Resultados Obtidos

- O sistema funciona corretamente com diferentes tipos de animais
- Foram implementadas simulações com base em sintomas comuns
- O menu está funcional e modular
- Os ficheiros são bem organizados e documentados

Limitações:
- O sistema não substitui diagnósticos reais
- Não integra ainda interface gráfica (GUI)

---

## 8. Conclusões Finais

Este projeto permitiu consolidar os conhecimentos adquiridos no módulo de programação. 
Foram aplicados conceitos como modularização, separação por camadas, estrutura de dados, testes e documentação. 

Futuramente, poderá ser expandido com uma interface gráfica ou integração com bases de dados.

---

## 9. Anexos e Links

# Gráficos de Barras 

```{python}
import plotly.express as px
import pandas as pd

dados = pd.DataFrame({
    "Sintoma": ["Febre", "Tosse", "Letargia", "Vómito", "Falta de Apetite"],
    "Ocorrências": [12, 8, 5, 7, 6]
})

fig = px.bar(dados, x="Sintoma", y="Ocorrências", title="Sintomas Frequentes")
fig.show()
```

---

# Gráfico de Dispersão

```{python}
df = px.data.iris()

fig = px.scatter(df, x="sepal_width", y="sepal_length",
                 color="species", title="Iris Dataset – Sepal Dimensions")
fig.show()
```

---

# Gráfico de Linhas (Altair – Registo de Temperatura)

<div style="max-width: 400px; margin: auto;">

```{python}
import altair as alt
import pandas as pd

df = pd.DataFrame({
    'Dia': ['Seg', 'Ter', 'Qua', 'Qui', 'Sex'],
    'Temperatura': [37.2, 37.5, 37.1, 37.3, 37.0]
})

alt.Chart(df).mark_line(size=3).encode(
    x=alt.X('Dia', sort=['Seg', 'Ter', 'Qua', 'Qui', 'Sex']),
    y='Temperatura'
).interactive().properties(width=350, height=220)
```

---

# Gráfico de Pizza (Matplotlib – Tipos de Animais Consultados)

```{python}
import matplotlib.pyplot as plt

labels = ['Cães', 'Gatos', 'Coelhos', 'Outros']
sizes = [40, 30, 15, 15]

plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, autopct='%1.1f%%')
plt.title("Distribuição de Animais Consultados")
plt.show()
```

---
